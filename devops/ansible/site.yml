- name: Setting up Girder
  hosts: all
  vars:
    required_ansible_version: 2.1.0
  tasks:
    - fail: msg="Playbook requires ansible >= {{required_ansible_version}}"
      when: ansible_version.string|version_compare(required_ansible_version, '<')

    - name: Set some facts
      set_fact:
        girder_host: "{{girder_host|default('localhost')}}"
        girder_port: "{{girder_port|default(8080)}}"
        girder_scheme: "http"

    - name: Create Girder EDP admin user
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        user:
          firstName: "edp"
          lastName: "edp"
          login: "edpadmin"
          password: "{{ edpadmin_password }}"
          email: "edp@kitware.com"
          admin: yes
        state: present

    - name: Create edp group
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        group:
          name: "edp"
          description: "The EDP group"
        state: present

    - name: Set registration policy
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "core.registration_policy",
          "value": "{{ registration_policy }}"
        }
      when: registration_policy is defined

    - name: Create edp collection
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        collection:
          name: "edp"
          description: "EDP collection"
          public: "{{ public_data | default(no) }}"
        state: present
      register: edp_collection

    - name: Create data folder
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        folder:
          parentType: "collection"
          parentId: "{{edp_collection['gc_return']['_id'] }}"
          name: "data"
          description: "EDP data folder"
          public: "{{ public_data | default(no) }}"
          access:
            groups:
              - name: edp
                type: admin
        state: present
        
    - name: Enable EDP plugins
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        plugins:
          - edp
        state: present

    - name: Restart the server
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        put:
          path: "system/restart"

    - name: Wait until server restarts
      wait_for:
        host="{{girder_host}}"
        port="{{girder_port}}"
        delay=5

    - name: Configure EDP plugins
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "edp.configuration.deployment",
          "value": "{{ edp_deployment }}"
        }
        - {
          "key": "edp.configuration.license",
          "value": "{{ edp_license | to_json }}"
        }
        - {
          "key": "edp.configuration.privacy",
          "value": "{{ edp_privacy | to_json }}"
        }
      tags: configure

    - name: Enable OAuth plugin
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        plugins:
          - oauth
        state: present

    - name: Create filesystem assetstore
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        assetstore:
          name: "Filesystem Assetstore"
          type: "filesystem"
          root: "/assetstore"
          current: true
        state: present
      when: s3_bucket is not defined

    - name: Create S3 assetstore
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        assetstore:
          name: "S3 Assetstore"
          type: "s3"
          bucket: "{{ s3_bucket }}"
          service: ""
          region: "{{ s3_region }}"
          prefix: "{{ s3_prefix | default(assetstore)}}"
          inferCredentials: true
          current: true
        state: present
      when: s3_bucket is defined

    - name: Restart the server
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        put:
          path: "system/restart"

    - name: Wait until server restarts
      wait_for:
        host="{{girder_host}}"
        port="{{girder_port}}"
        delay=5

    - name: Configure OAuth plugins
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "oauth.google_client_id",
          "value": "{{ oauth_google_client_id }}"
        }
        - {
          "key": "oauth.google_client_secret",
          "value": "{{ oauth_google_client_secret }}"
        }
        - {
          "key": "oauth.providers_enabled",
          "value": ["google"]
        }
      when: oauth_google_client_id is defined

    - name: Restart the server
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        put:
          path: "system/restart"

    - name: Wait until server restarts
      wait_for:
        host="{{girder_host}}"
        port="{{girder_port}}"
        delay=5

    - name: Create images folder
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        folder:
          parentType: "collection"
          parentId: "{{edp_collection['gc_return']['_id'] }}"
          name: "images"
          description: "EDP images folder"
          public: yes
          access:
            groups:
              - name: edp
                type: admin
        state: present
      register: images_folder
      when: favicon_path is defined or logo_path is defined

    - name: Create favicon item
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        item:
          name: "{{ favicon_path | basename }}"
          folderId: "{{ images_folder['gc_return']['_id'] }}"
        state: present
      register: favicon_item
      when: favicon_path is defined

    - name: Copy over favicon
      copy:
        src: "{{ playbook_dir }}/{{ favicon_path }}"
        dest: "/tmp/{{ favicon_path | basename }}"
      when: favicon_path is defined

    - name: Upload favicon
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        files:
          itemId: "{{ favicon_item['gc_return']['_id'] }}"
          sources:
            - "/tmp/{{ favicon_path | basename }}"
        state: present
      when: favicon_path is defined

    - name: Lookup favicon file
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        get:
          path: "item/{{ favicon_item['gc_return']['_id'] }}/files"

      register: favicon_file
      when: favicon_item is defined

    - name: Create header logo item
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        item:
          name: "{{ header_logo_path | basename }}"
          folderId: "{{ images_folder['gc_return']['_id'] }}"
        state: present
      register: header_logo_item
      when: header_logo_path is defined

    - name: Copy over header logo
      copy:
        src: "{{ playbook_dir }}/{{ header_logo_path }}"
        dest: "/tmp/{{ header_logo_path | basename }}"
      when: header_logo_path is defined

    - name: Upload header logo
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        files:
          itemId: "{{ header_logo_item['gc_return']['_id'] }}"
          sources:
            - "/tmp/{{ header_logo_path | basename }}"
        state: present
      when: header_logo_path is defined

    - name: Lookup header_logo file
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        get:
          path: "item/{{ header_logo_item['gc_return']['_id'] }}/files"

      register: header_logo_file
      when: header_logo_item is defined

    - name: Set header logo and favicon file IDs
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "edp.configuration.favicon.file.id",
          "value": "{{ favicon_file['gc_return'][0]['_id'] }}"
        }
        - {
          "key": "edp.configuration.header.logo.file.id",
          "value": "{{ header_logo_file['gc_return'][0]['_id'] }}"
        }
      when: header_logo_file is defined and favicon_file is defined

    - name: Create footer logo item
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        item:
          name: "{{ footer_logo_path | basename }}"
          folderId: "{{ images_folder['gc_return']['_id'] }}"
        state: present
      register: footer_logo_item
      when: footer_logo_path is defined

    - name: Copy over footer logo
      copy:
        src: "{{ playbook_dir }}/{{ footer_logo_path }}"
        dest: "/tmp/{{ footer_logo_path | basename }}"
      when: footer_logo_path is defined

    - name: Upload footer logo
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        files:
          itemId: "{{ footer_logo_item['gc_return']['_id'] }}"
          sources:
            - "/tmp/{{ footer_logo_path | basename }}"
        state: present
      when: footer_logo_path is defined

    - name: Lookup footer logo file
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        get:
          path: "item/{{ footer_logo_item['gc_return']['_id'] }}/files"

      register: footer_logo_file
      when: footer_logo_item is defined

    - name: Set footer logo ID
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "edp.configuration.footer.logo.file.id",
          "value": "{{ footer_logo_file['gc_return'][0]['_id'] }}"
        }
      when: footer_logo_file is defined

    - name: Set MIME type to image/svg+xml
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        put:
          path: "file/{{ footer_logo_file['gc_return'][0]['_id'] }}"
          parameters:
            mimeType: "image/svg+xml"
      when: (footer_logo_path | basename | splitext)[1] == '.svg'

    - name: Set footer logo URL
      girder:
        host: "{{girder_host}}"
        port: "{{girder_port}}"
        scheme: "{{girder_scheme}}"
        username: "edpadmin"
        password: "{{ edpadmin_password }}"
        setting:
          key: "{{item.key}}"
          value: "{{item.value}}"
        state: present
      with_items:
        - {
          "key": "edp.configuration.footer.logo.url",
          "value": "{{ footer_logo_url }}"
        }
      when: footer_logo_url is defined
